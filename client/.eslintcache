[{"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\index.js":"1","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\App.js":"3","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\list\\List.js":"4","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Dialog.js":"5","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Stepper.js":"6","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\welfare\\Welfare.js":"7","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\service\\Service.js":"8","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\register\\Register.js":"9"},{"size":517,"mtime":1614574311848,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1614574311848,"results":"12","hashOfConfig":"11"},{"size":215,"mtime":1614574311848,"results":"13","hashOfConfig":"11"},{"size":2642,"mtime":1614670065221,"results":"14","hashOfConfig":"11"},{"size":860,"mtime":1614581743853,"results":"15","hashOfConfig":"11"},{"size":4087,"mtime":1614582748059,"results":"16","hashOfConfig":"11"},{"size":10032,"mtime":1614574311848,"results":"17","hashOfConfig":"11"},{"size":10034,"mtime":1614574311848,"results":"18","hashOfConfig":"11"},{"size":16117,"mtime":1614669987678,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1rvmiyb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\index.js",[],["43","44"],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\App.js",["45"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './components/list/List.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <List/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\list\\List.js",["46","47","48","49","50","51","52","53"],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Dialog.js",[],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Stepper.js",["54"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Register from './register/Register';\r\nimport Services from './service/Service';\r\nimport Welfare from './welfare/Welfare';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Registeration', 'Welfare', 'Services'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return <Register/>;\r\n    case 1:\r\n      return <Welfare/> ;\r\n    case 2:\r\n      return <Services/>;\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nexport default function HorizontalLinearStepper() {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n  const steps = getSteps();\r\n\r\n  const isStepOptional = (step) => {\r\n    return step === 1;\r\n  };\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped;\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep}>\r\n        {steps.map((label, index) => {\r\n          const stepProps = {};\r\n          const labelProps = {};\r\n          \r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps}>{label}</StepLabel>\r\n            </Step>\r\n          );\r\n        })}\r\n      </Stepper>\r\n      <div>\r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>\r\n              All steps completed - you&apos;re finished\r\n            </Typography>\r\n            <Button onClick={handleReset} className={classes.button}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n            <div>\r\n              <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n               <ArrowBackIosIcon/>\r\n              </Button>\r\n             \r\n            \r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleNext}\r\n                className={classes.button}\r\n              >\r\n                {activeStep === steps.length - 1 ? <CheckCircleOutlineIcon/> : <ArrowForwardIosIcon/>}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\welfare\\Welfare.js",["55","56"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { TextField, Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nfunction DatePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <DatePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TimePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <TimePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nconst onSubmit = async values => {\r\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n  await sleep(300);\r\n  window.alert(JSON.stringify(values, 0, 2));\r\n};\r\nconst validate = values => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = 'Required';\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = 'Required';\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default function Welfare() {\r\n  return (\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: 600 }}>\r\n      <CssBaseline />\r\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n        🏁 Welfare\r\n      </Typography>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n        initialValues={{ employed: true, stooge: 'larry' }}\r\n        validate={validate}\r\n        render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n          <form onSubmit={handleSubmit} noValidate>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"firstName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"lastName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    required\r\n                    component={TextField}\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    label=\"Employed\"\r\n                    control={\r\n                      <Field\r\n                        name=\"employed\"\r\n                        component={Checkbox}\r\n                        type=\"checkbox\"\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Best Stooge</FormLabel>\r\n                    <RadioGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Larry\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"larry\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Moe\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"moe\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Curly\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"curly\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Sauces</FormLabel>\r\n                    <FormGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Ketchup\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"ketchup\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Mustard\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"mustard\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Salsa\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"salsa\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Guacamole 🥑\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"guacamole\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"notes\"\r\n                    component={TextField}\r\n                    multiline\r\n                    label=\"Notes\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"city\"\r\n                    component={Select}\r\n                    label=\"Select a City\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                  >\r\n                    <MenuItem value=\"London\">London</MenuItem>\r\n                    <MenuItem value=\"Paris\">Paris</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      A city with a very long Name\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"rendez-vous\"\r\n                      component={DatePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Rendez-vous\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"alarm\"\r\n                      component={TimePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Alarm\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    onClick={reset}\r\n                    disabled={submitting || pristine}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\service\\Service.js",["57","58"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { TextField, Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nfunction DatePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <DatePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TimePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <TimePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nconst onSubmit = async values => {\r\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n  await sleep(300);\r\n  window.alert(JSON.stringify(values, 0, 2));\r\n};\r\nconst validate = values => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = 'Required';\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = 'Required';\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default function Services() {\r\n  return (\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: 600 }}>\r\n      <CssBaseline />\r\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n        🏁 Services\r\n      </Typography>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n        initialValues={{ employed: true, stooge: 'larry' }}\r\n        validate={validate}\r\n        render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n          <form onSubmit={handleSubmit} noValidate>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"firstName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"lastName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    required\r\n                    component={TextField}\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    label=\"Employed\"\r\n                    control={\r\n                      <Field\r\n                        name=\"employed\"\r\n                        component={Checkbox}\r\n                        type=\"checkbox\"\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Best Stooge</FormLabel>\r\n                    <RadioGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Larry\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"larry\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Moe\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"moe\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Curly\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"curly\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Sauces</FormLabel>\r\n                    <FormGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Ketchup\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"ketchup\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Mustard\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"mustard\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Salsa\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"salsa\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Guacamole 🥑\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"guacamole\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"notes\"\r\n                    component={TextField}\r\n                    multiline\r\n                    label=\"Notes\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"city\"\r\n                    component={Select}\r\n                    label=\"Select a City\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                  >\r\n                    <MenuItem value=\"London\">London</MenuItem>\r\n                    <MenuItem value=\"Paris\">Paris</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      A city with a very long Name\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"rendez-vous\"\r\n                      component={DatePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Rendez-vous\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"alarm\"\r\n                      component={TimePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Alarm\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    onClick={reset}\r\n                    disabled={submitting || pristine}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\register\\Register.js",["59","60","61","62","63","64","65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"76","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":16},{"ruleId":"71","severity":1,"message":"77","line":5,"column":8,"nodeType":"73","messageId":"74","endLine":5,"endColumn":18},{"ruleId":"71","severity":1,"message":"78","line":7,"column":8,"nodeType":"73","messageId":"74","endLine":7,"endColumn":16},{"ruleId":"71","severity":1,"message":"79","line":16,"column":11,"nodeType":"73","messageId":"74","endLine":16,"endColumn":22},{"ruleId":"71","severity":1,"message":"80","line":20,"column":21,"nodeType":"73","messageId":"74","endLine":20,"endColumn":31},{"ruleId":"71","severity":1,"message":"81","line":26,"column":18,"nodeType":"73","messageId":"74","endLine":26,"endColumn":25},{"ruleId":"82","severity":1,"message":"83","line":33,"column":18,"nodeType":"84","messageId":"85","endLine":33,"endColumn":20},{"ruleId":"71","severity":1,"message":"86","line":73,"column":9,"nodeType":"73","messageId":"74","endLine":73,"endColumn":19},{"ruleId":"71","severity":1,"message":"75","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"87","line":8,"column":3,"nodeType":"73","messageId":"74","endLine":8,"endColumn":7},{"ruleId":"71","severity":1,"message":"75","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"87","line":8,"column":3,"nodeType":"73","messageId":"74","endLine":8,"endColumn":7},{"ruleId":"71","severity":1,"message":"75","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"88","line":4,"column":21,"nodeType":"73","messageId":"74","endLine":4,"endColumn":29},{"ruleId":"71","severity":1,"message":"87","line":8,"column":3,"nodeType":"73","messageId":"74","endLine":8,"endColumn":7},{"ruleId":"71","severity":1,"message":"89","line":10,"column":3,"nodeType":"73","messageId":"74","endLine":10,"endColumn":9},{"ruleId":"71","severity":1,"message":"90","line":15,"column":3,"nodeType":"73","messageId":"74","endLine":15,"endColumn":12},{"ruleId":"71","severity":1,"message":"91","line":30,"column":10,"nodeType":"73","messageId":"74","endLine":30,"endColumn":27},{"ruleId":"82","severity":1,"message":"92","line":83,"column":11,"nodeType":"84","messageId":"85","endLine":83,"endColumn":13},{"ruleId":"93","severity":1,"message":"94","line":143,"column":11,"nodeType":"95","endLine":143,"endColumn":29},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Dialog' is defined but never used.","'FormDialog' is defined but never used.","'EditIcon' is defined but never used.","'handleClose' is assigned a value but never used.","'setColumns' is assigned a value but never used.","'setData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleSkip' is assigned a value but never used.","'Link' is defined but never used.","'Checkbox' is defined but never used.","'Button' is defined but never used.","'FormGroup' is defined but never used.","'TimePickerWrapper' is defined but never used.","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]