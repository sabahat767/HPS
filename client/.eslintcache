[{"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\index.js":"1","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\App.js":"3","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\list\\List.js":"4","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Dialog.js":"5","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Stepper.js":"6","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\welfare\\Welfare.js":"7","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\service\\Service.js":"8","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\register\\Register.js":"9"},{"size":517,"mtime":1614574311848,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1614574311848,"results":"12","hashOfConfig":"11"},{"size":215,"mtime":1614574311848,"results":"13","hashOfConfig":"11"},{"size":4382,"mtime":1614581676382,"results":"14","hashOfConfig":"11"},{"size":860,"mtime":1614581743853,"results":"15","hashOfConfig":"11"},{"size":4087,"mtime":1614582748059,"results":"16","hashOfConfig":"11"},{"size":10032,"mtime":1614574311848,"results":"17","hashOfConfig":"11"},{"size":10034,"mtime":1614574311848,"results":"18","hashOfConfig":"11"},{"size":12757,"mtime":1614583613320,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1rvmiyb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\index.js",[],["43","44"],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\App.js",["45"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './components/list/List.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <List/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\list\\List.js",["46","47","48","49","50","51","52"],"import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport MaterialTable from 'material-table'\r\nimport { Dialog } from '@material-ui/core';\r\nimport FormDialog from '../Dialog';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport HorizontalLinearStepper from '../Stepper';\r\nconst List = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n   \r\n    const [columns, setColumns] = React.useState([\r\n        { title: 'Name', field: 'name' },\r\n        { title: 'Sur Name', field: 'surname' },\r\n        { title: 'Birth Year', field: 'birthYear', type: 'numeric' },\r\n        { title: 'Birth City', field: 'birthCity', lookup: { 34: 'Karachi', 63: 'Lahore' } }\r\n    ]);\r\n    const [data, setData] = React.useState([\r\n        { name: 'Sabahat', surname: 'Sabir Khan', birthYear: 1999, birthCity: 34 },\r\n        { name: 'Hira', surname: 'Sufyan', birthYear: 1996, birthCity: 63 }\r\n    ])\r\n    return (\r\n        <div style={{ maxWidth: '90%', margin : 'auto' }}>\r\n            {/* <FormDialog open={open} onClose={handleClose}/> */}\r\n            {open==true?<HorizontalLinearStepper/>:(\r\n                \r\n            <MaterialTable\r\n                title = \"Dummy Data\"\r\n                columns = {columns}\r\n                data = {data}\r\n                actions={[\r\n                    {\r\n                        icon: AddIcon,\r\n                        tooltip: 'Add',\r\n                        isFreeAction: true,\r\n                      \r\n                        onClick: handleClickOpen,\r\n                    },\r\n                    // {\r\n                    //     icon: AddIcon,\r\n                    //     tooltip: 'Add',\r\n                    //     onClick: handleClickOpen,\r\n                    // }\r\n                  ]}\r\n          \r\n                // editable={{\r\n                    // isEditable: rowData => rowData.name === 'a', // only name(a) rows would be editable\r\n                    // isEditHidden: rowData => rowData.name === 'x',\r\n                    // isDeletable: rowData => rowData.name === 'b', // only name(b) rows would be deletable,\r\n                    // isDeleteHidden: rowData => rowData.name === 'y',\r\n                    // onBulkUpdate: changes => \r\n                    //     new Promise((resolve, reject) => {\r\n                    //         setTimeout(() => {\r\n                    //             /* setData([...data, newData]); */\r\n\r\n                    //             resolve();\r\n                    //         }, 1000);\r\n                    //     }),\r\n                    // onRowAddCancelled: rowData => console.log('Row adding cancelled'),\r\n                    // onRowUpdateCancelled: rowData => console.log('Row editing cancelled'),\r\n                    // onRowAdd: newData =>\r\n                    //     new Promise((resolve, reject) => {\r\n                    //         setTimeout(() => {\r\n                    //             /* setData([...data, newData]); */\r\n\r\n                    //             resolve();\r\n                    //         }, 1000);\r\n                    //     }),\r\n                    // onRowUpdate: (newData, oldData) =>\r\n                    //     new Promise((resolve, reject) => {\r\n                    //         setTimeout(() => {\r\n                    //             const dataUpdate = [...data];\r\n                    //             const index = oldData.tableData.id;\r\n                    //             dataUpdate[index] = newData;\r\n                    //             setData([...dataUpdate]);\r\n\r\n                    //             resolve();\r\n                    //         }, 1000);\r\n                    //     }),\r\n                    // onRowDelete: oldData =>\r\n                    //     new Promise((resolve, reject) => {\r\n                    //         setTimeout(() => {\r\n                    //             const dataDelete = [...data];\r\n                    //             const index = oldData.tableData.id;\r\n                    //             dataDelete.splice(index, 1);\r\n                    //             setData([...dataDelete]);\r\n\r\n                    //             resolve();\r\n                    //         }, 1000);\r\n                    //     })\r\n                // }}\r\n            />  )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Dialog.js",[],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\Stepper.js",["53"],"C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\welfare\\Welfare.js",["54","55"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { TextField, Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nfunction DatePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <DatePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TimePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <TimePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nconst onSubmit = async values => {\r\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n  await sleep(300);\r\n  window.alert(JSON.stringify(values, 0, 2));\r\n};\r\nconst validate = values => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = 'Required';\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = 'Required';\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default function Welfare() {\r\n  return (\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: 600 }}>\r\n      <CssBaseline />\r\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n        🏁 Welfare\r\n      </Typography>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n        initialValues={{ employed: true, stooge: 'larry' }}\r\n        validate={validate}\r\n        render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n          <form onSubmit={handleSubmit} noValidate>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"firstName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"lastName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    required\r\n                    component={TextField}\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    label=\"Employed\"\r\n                    control={\r\n                      <Field\r\n                        name=\"employed\"\r\n                        component={Checkbox}\r\n                        type=\"checkbox\"\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Best Stooge</FormLabel>\r\n                    <RadioGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Larry\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"larry\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Moe\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"moe\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Curly\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"curly\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Sauces</FormLabel>\r\n                    <FormGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Ketchup\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"ketchup\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Mustard\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"mustard\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Salsa\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"salsa\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Guacamole 🥑\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"guacamole\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"notes\"\r\n                    component={TextField}\r\n                    multiline\r\n                    label=\"Notes\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"city\"\r\n                    component={Select}\r\n                    label=\"Select a City\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                  >\r\n                    <MenuItem value=\"London\">London</MenuItem>\r\n                    <MenuItem value=\"Paris\">Paris</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      A city with a very long Name\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"rendez-vous\"\r\n                      component={DatePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Rendez-vous\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"alarm\"\r\n                      component={TimePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Alarm\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    onClick={reset}\r\n                    disabled={submitting || pristine}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\service\\Service.js",["56","57"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { TextField, Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nfunction DatePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <DatePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TimePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <TimePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nconst onSubmit = async values => {\r\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n  await sleep(300);\r\n  window.alert(JSON.stringify(values, 0, 2));\r\n};\r\nconst validate = values => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = 'Required';\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = 'Required';\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default function Services() {\r\n  return (\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: 600 }}>\r\n      <CssBaseline />\r\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n        🏁 Services\r\n      </Typography>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n        initialValues={{ employed: true, stooge: 'larry' }}\r\n        validate={validate}\r\n        render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n          <form onSubmit={handleSubmit} noValidate>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"firstName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"lastName\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Last Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    required\r\n                    component={TextField}\r\n                    type=\"email\"\r\n                    label=\"Email\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    label=\"Employed\"\r\n                    control={\r\n                      <Field\r\n                        name=\"employed\"\r\n                        component={Checkbox}\r\n                        type=\"checkbox\"\r\n                      />\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Best Stooge</FormLabel>\r\n                    <RadioGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Larry\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"larry\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Moe\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"moe\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Curly\"\r\n                        control={\r\n                          <Field\r\n                            name=\"stooge\"\r\n                            component={Radio}\r\n                            type=\"radio\"\r\n                            value=\"curly\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Sauces</FormLabel>\r\n                    <FormGroup row>\r\n                      <FormControlLabel\r\n                        label=\"Ketchup\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"ketchup\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Mustard\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"mustard\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Salsa\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"salsa\"\r\n                          />\r\n                        }\r\n                      />\r\n                      <FormControlLabel\r\n                        label=\"Guacamole 🥑\"\r\n                        control={\r\n                          <Field\r\n                            name=\"sauces\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value=\"guacamole\"\r\n                          />\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"notes\"\r\n                    component={TextField}\r\n                    multiline\r\n                    label=\"Notes\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"city\"\r\n                    component={Select}\r\n                    label=\"Select a City\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                  >\r\n                    <MenuItem value=\"London\">London</MenuItem>\r\n                    <MenuItem value=\"Paris\">Paris</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      A city with a very long Name\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"rendez-vous\"\r\n                      component={DatePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Rendez-vous\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      name=\"alarm\"\r\n                      component={TimePickerWrapper}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      label=\"Alarm\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    onClick={reset}\r\n                    disabled={submitting || pristine}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Student-PC\\Desktop\\HospitalManagementSystem\\client\\src\\components\\register\\Register.js",["58","59","60","61","62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":12},{"ruleId":"68","severity":1,"message":"72","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":16},{"ruleId":"68","severity":1,"message":"73","line":4,"column":10,"nodeType":"70","messageId":"71","endLine":4,"endColumn":16},{"ruleId":"68","severity":1,"message":"74","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":18},{"ruleId":"68","severity":1,"message":"75","line":15,"column":11,"nodeType":"70","messageId":"71","endLine":15,"endColumn":22},{"ruleId":"68","severity":1,"message":"76","line":19,"column":21,"nodeType":"70","messageId":"71","endLine":19,"endColumn":31},{"ruleId":"68","severity":1,"message":"77","line":25,"column":18,"nodeType":"70","messageId":"71","endLine":25,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":32,"column":18,"nodeType":"80","messageId":"81","endLine":32,"endColumn":20},{"ruleId":"68","severity":1,"message":"82","line":73,"column":9,"nodeType":"70","messageId":"71","endLine":73,"endColumn":19},{"ruleId":"68","severity":1,"message":"72","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":16},{"ruleId":"68","severity":1,"message":"83","line":8,"column":3,"nodeType":"70","messageId":"71","endLine":8,"endColumn":7},{"ruleId":"68","severity":1,"message":"72","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":16},{"ruleId":"68","severity":1,"message":"83","line":8,"column":3,"nodeType":"70","messageId":"71","endLine":8,"endColumn":7},{"ruleId":"68","severity":1,"message":"72","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":16},{"ruleId":"68","severity":1,"message":"84","line":4,"column":21,"nodeType":"70","messageId":"71","endLine":4,"endColumn":29},{"ruleId":"68","severity":1,"message":"83","line":8,"column":3,"nodeType":"70","messageId":"71","endLine":8,"endColumn":7},{"ruleId":"68","severity":1,"message":"85","line":10,"column":3,"nodeType":"70","messageId":"71","endLine":10,"endColumn":9},{"ruleId":"68","severity":1,"message":"86","line":15,"column":3,"nodeType":"70","messageId":"71","endLine":15,"endColumn":12},{"ruleId":"68","severity":1,"message":"87","line":29,"column":10,"nodeType":"70","messageId":"71","endLine":29,"endColumn":27},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Dialog' is defined but never used.","'FormDialog' is defined but never used.","'handleClose' is assigned a value but never used.","'setColumns' is assigned a value but never used.","'setData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleSkip' is assigned a value but never used.","'Link' is defined but never used.","'Checkbox' is defined but never used.","'Button' is defined but never used.","'FormGroup' is defined but never used.","'TimePickerWrapper' is defined but never used.","no-global-assign","no-unsafe-negation"]